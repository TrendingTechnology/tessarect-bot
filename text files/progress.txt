def check_Mod(ctx):
    with open('mod.txt') as f: # do change the 'Mod.txt' to the name that suits you. Ensure that this file is in the same directory as your code!
        if str(ctx.author.id) in f.read(): # this is reading the text file and checking if there's a matching string
            return ctx.author.id  
@client.command()
@commands.check(check_Mod)
async def add_Mod(ctx, user:discord.Member=None):
    if user == None:
        await ctx.send("Please provide a user to add as a Mod!")
        return

    # First we'll make some functions for cleaner, more readable code #

    def is_Mod(user_id): 
    ## This function will check if the given id is already in the file. True if in file, False if not ##
        with open('mod.txt', 'r') as f:
            if str(user_id) in f.read():
                return True
            else:
                return False

    def add_Mod(user_id):
    ## This function will add the given user id into the given text file, Mod.txt ##
        with open('mod.txt', 'a') as f: # 'a' is used for appending, since we don't want to overwrite all the ids already in the file
            f.write(f"{str(user_id)}\n")
            f.close()

    # Now we put those functions to use #
    if is_Mod(user.id) == True:
        await ctx.send(f"The user {user} is already a Mod!")
    else:
        add_Mod(user.id)
        await ctx.send(f"{user} added as a Mod!")  
@client.command()
@client.check(check_Mod)
async def modtest(ctx):
  await ctx.send('Positive')
@modtest.error()
async def negativemod(ctx,error):
  await ctx.send('Negative , you arent a Developer')


  ________________________________
@helpx.command() 
async def utility(ctx):
    contents = ["**Why people love using Arch Linux?**\n\nArch Linux, a lightweight and flexible Linux® distribution that tries to Keep It Simple.", "**The DIY approach gives you the control over every aspect of your operating system**\n\nI have always found Arch Linux as a DIY (Do It Yourself) operating system. From installing to managing, Arch Linux lets you handle everything.\n\nYou decide which desktop environment to use, which components and services to install. This granular control gives you a minimal operating system to build upon with elements of your choice.\n\nIf you are a DIY enthusiast, you’ll love Arch Linux.", "**With Arch Linux, you get a better understanding of how Linux works**\n\nIf you ever tried to install Arch Linux, you know the complexity that comes with it.\n\nBut that complexity also means that you’ll be forced to learn things that you probably never bother to in other distributions.\n\nFor example, configuring network itself while installing Arch Linux is a good learning lesson.\n\nIf you start to get overwhelmed, Arch Wiki is there for you. It is the most extensive and awesome community-managed documentation on the internet. Just browsing through [Arch Wiki](https://wiki.archlinux.org) will teach you plenty of things.", """**Latest kernel and software with rolling release model**\n\nArch Linux is a rolling release distribution. That means new kernel and application versions are rolled out to you as soon as they are released.

While most other Linux distributions serve you old Linux kernel versions, Arch is quick to provide you the latest kernel.

The same goes for software. If a new version of software in the Arch repositories is released, Arch users get the new versions before other users most of the time.

Everything is fresh and cutting edge in the rolling release model. You don’t have to upgrade operating system from one version to another. Just use the pacman command and you always have the latest version.""", '''**AUR or Arch User Repository**\n\nArch Linux has plenty of software in its repository. The AUR extends the software offering of Arch Linux. You get a huge number of software with [AUR in Arch Linux.](https://aur.archlinux.org/)

AUR is the community driven approach to provide newer applications. You can search and install applications with the help of an [AUR helper](https://itsfoss.com/best-aur-helpers/) tool.''', '''**Sense of Accomplishment**\n\nAs James Clear mentions in his book Atomic Habits, ***human brain loves a challenge, but only if it is within an optimal zone of difficulty.***

Remember the feeling when you first installed any Linux distribution even if it was installing Linux Mint? That gave you a sense of achievement. You successfully installed Linux!

If you have been using Ubuntu or Fedora or other distribution for some time and you start to get comfortable (or bored), try installing Arch Linux.

For a moderately experienced Linux user, successfully installing Arch Linux itself gives a sense of accomplishment.

It is a challenge but an achievable one. If you suggest a new Linux user to try Arch Linux or even more complicated one like Linux From Scratch, the challenge would be too difficult to achieve.

This sense of successfully completing a challenge is also one of the reasons why people use Arch Linux.''', '''**No corporate involvement! Arch is created, supported and owned by community**\n\nUbuntu is backed by Canonical, Fedora is from Red Hat (part of IBM now) and openSUSE is from SUSE. All these major distributions are corporate backed.

This is not bad or crime in itself. But a few people do not like corporate involvement in open source projects.

Like Debian, Arch Linux is one of the rare few community-only Linux distribution projects.

You may point out that many other distributions like Linux Mint etc are also not sponsored by corporate. Well, that might be true but Linux Mint itself is based on Ubuntu and uses Ubuntu’s repositories. Arch Linux is not derivative of another distribution.

In that sense, Debian and Arch Linux are more pure community-driven projects. It may not matter to many people but a few people do care about such things.''', '''Lemme share a quick meme!''']
    pages = len(contents)
    cur_page = 1
    message = await ctx.send(embed=discord.Embed(description=f"{contents[cur_page-1]}", color=discord.Color.blue()))
    # getting the message object for editing and reacting

    await message.add_reaction("◀️")
    await message.add_reaction("▶️")

    def check(reaction, user):
        return user == ctx.author and str(reaction.emoji) in ["◀️", "▶️"]
        # This makes sure nobody except the command sender can interact with the "menu"

    while True:
        try:
            reaction, user = await client.wait_for("reaction_add", timeout=10000, check=check)

            if str(reaction.emoji) == "▶️" and cur_page != pages:
                cur_page += 1
                if cur_page==8:
                    em=discord.Embed(description=f"{contents[cur_page-1]}", color=discord.Color.blue())
                    em.set_image(url="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.redd.it%2F9aj95rwqdex41.jpg&f=1&nofb=1")
                else:
                    em=discord.Embed(description=f"{contents[cur_page-1]}", color=discord.Color.blue())
                
                await message.edit(embed=em)
                await message.remove_reaction(reaction, user)

            elif str(reaction.emoji) == "◀️" and cur_page > 1:
                cur_page -= 1
                if cur_page==8:
                    em=discord.Embed(description=f"{contents[cur_page-1]}", color=discord.Color.blue())
                    em.set_image(url="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.redd.it%2F9aj95rwqdex41.jpg&f=1&nofb=1")
                else:
                    em=discord.Embed(description=f"{contents[cur_page-1]}", color=discord.Color.blue())
                
                await message.edit(embed=em)
                await message.remove_reaction(reaction, user)

            else:
                await message.remove_reaction(reaction, user)
                # removes reactions if the user tries to go forward on the last page or
                # backwards on the first page
        except asyncio.TimeoutError:
            await message.delete()
            break
    items = list(range(0, 57))
    l = len(items)


    printProgressBar(0, l, prefix = 'Progress:', suffix = 'Complete', length = 5)
    for i, item in enumerate(items):
      time.sleep(0.1)
      printProgressBar(i + 1, l, prefix = 'Progress:', suffix = 'Complete', length = 5)
